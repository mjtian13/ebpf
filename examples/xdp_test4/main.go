//go:build linux
// +build linux

// This program demonstrates attaching an eBPF program to a network interface
// with XDP (eXpress Data Path). The program filters TCP, UDP and ICMP IPv4 
// packets and writes the data of the packet to a RINGBUF data structure.
// The userspace program (Go code in this file) prints the contents
// of the RINGBUF map every time a packet is encountered.
// It is possible to modify the XDP program to drop or redirect packets as well.
// This example depends on bpf_link, available in Linux kernel version 5.7 or newer.
package main

import (
	"fmt"
	"log"
	"net"
	"os"
	"bytes"
	"encoding/binary"
	"errors"
	
	"github.com/cilium/ebpf/link"
	"github.com/cilium/ebpf/ringbuf"
)

// $BPF_CLANG and $BPF_CFLAGS are set by the Makefile.
//go:generate go run github.com/cilium/ebpf/cmd/bpf2go -cc $BPF_CLANG -cflags $BPF_CFLAGS -type packet_info bpf xdp.c -- -I./headers

func main() {
	log.SetFlags(log.LstdFlags | log.Lshortfile)
	if len(os.Args) < 2 {
		log.Fatalf("Please specify a network interface")
	}

	// Look up the network interface by name.
	ifaceName := os.Args[1]
	iface, err := net.InterfaceByName(ifaceName)
	if err != nil {
		log.Fatalf("lookup network iface %q: %s", ifaceName, err)
	}

	// Load pre-compiled programs into the kernel.
	objs := bpfObjects{}
	if err := loadBpfObjects(&objs, nil); err != nil {
		log.Fatalf("loading objects: %s", err)
	}
	defer objs.Close()

	// Attach the program.
	l, err := link.AttachXDP(link.XDPOptions{
		Program:   objs.XdpProgFunc,
		Interface: iface.Index,
		Flags: link.XDPGenericMode,
	})
	if err != nil {
		log.Fatalf("could not attach XDP program: %s", err)
	}
	defer l.Close()

	// Open a ringbuf reader from userspace RINGBUF map described in the
	// eBPF C program.
	rd, err := ringbuf.NewReader(objs.XdpTcppacketsMap)
	if err != nil {
		log.Fatalf("opening ringbuf reader: %s", err)
	}
	defer rd.Close()

	// Close the reader when the process receives a signal, which will exit
	// the read loop.

	// bpfPacketInfo is generated by bpf2go file. Present in bpfel.go
	// Generated bcoz of the "-type packet_info" flag we used when creating bpfel.go file using "go generate"
	var packet_info bpfPacketInfo
	
	log.Printf("Attached XDP program to iface %q (index %d)", iface.Name, iface.Index)
	log.Printf("Press Ctrl-C to exit and remove the program")

	// Print the contents of the BPF Ringbuf
	for {
		record, err := rd.Read()
		if err != nil {
			if errors.Is(err, ringbuf.ErrClosed) {
				log.Println("Received signal, exiting..")
				return
			}
			log.Printf("reading from reader: %s", err)
			continue
		}
	// Parse the ringbuf event entry into a bpfEvent structure.
	if err := binary.Read(bytes.NewBuffer(record.RawSample), binary.LittleEndian, &packet_info); err != nil {
		log.Printf("parsing ringbuf event: %s", err)
		continue
	}
	val1 := "Source Port"
	val2 := "Destination Port"
	srcIP := intToIP(packet_info.SourceIp)
	destIP := intToIP(packet_info.DestinationIp)
	tot_len := packet_info.TotalLength
	src_port := packet_info.SourcePort //valToLittleEndian(packet_info.SourcePort)
	dest_port := packet_info.DestinationPort //valToLittleEndian(packet_info.DestinationPort)
	protocol_id := packet_info.Protocol
	protocol := ""
	if (protocol_id == 1){ 
		protocol = "ICMP"
		val1 = "Type"
		val2 = "Sequence"
	} else if (protocol_id == 6) { 
		 protocol = "TCP"
	} else if (protocol_id == 17) {
		 protocol = "UDP"
	}
	fmt.Printf("Source IP: %s \t Destination IP: %s \t %s: %d \t %s: %d \t Total Length: %d \t Protocol: %s \n", srcIP, destIP, val1, src_port, val2, dest_port, tot_len, protocol)
	}
}

func intToIP(ipNum uint32) net.IP {
	ip := make(net.IP, 4)
	binary.LittleEndian.PutUint32(ip, ipNum)
	return ip
}	

/*
func valToLittleEndian(num uint16) uint16{
	b := make([]byte, 2)
	binary.LittleEndian.PutUint16(b, num)
	return binary.BigEndian.Uint16(b)
}
*/
