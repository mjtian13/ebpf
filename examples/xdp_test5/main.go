//go:build linux
// +build linux

// This program demonstrates attaching an eBPF program to a network interface
// with XDP (eXpress Data Path). The program parses the IPv4 source address
// from packets and writes the packet count by IP to an LRU hash map.
// The userspace program (Go code in this file) prints the contents
// of the map to stdout every second.
// It is possible to modify the XDP program to drop or redirect packets
// as well -- give it a try!
// This example depends on bpf_link, available in Linux kernel version 5.7 or newer.
package main

import (
	"fmt"
	"log"
	"net"
	"os"
	//"strings"
	//"time"
	"bytes"
	"encoding/binary"
	"errors"
	//"os/signal"
	//"syscall"
	//"sentry/socket"
	//"gvisor.dev/gvisor/pkg/sentry/socket"
	//syscall "golang.org/x/sys/unix"

	//"github.com/cilium/ebpf/internal"
	//"github.com/cilium/ebpf"
	"github.com/cilium/ebpf/link"
	"github.com/cilium/ebpf/ringbuf"
	//"github.com/cilium/ebpf/rlimit"
	//"golang.org/x/sys/unix"
)

// $BPF_CLANG and $BPF_CFLAGS are set by the Makefile.
//go:generate go run github.com/cilium/ebpf/cmd/bpf2go -cc $BPF_CLANG -cflags $BPF_CFLAGS -type packet_info bpf xdp.c -- -I./headers

func main() {
	log.SetFlags(log.LstdFlags | log.Lshortfile)
	if len(os.Args) < 2 {
		log.Fatalf("Please specify a network interface")
	}

	// Look up the network interface by name.
	ifaceName := os.Args[1]
	iface, err := net.InterfaceByName(ifaceName)
	if err != nil {
		log.Fatalf("lookup network iface %q: %s", ifaceName, err)
	}

	// Load pre-compiled programs into the kernel.
	objs := bpfObjects{}
	if err := loadBpfObjects(&objs, nil); err != nil {
		log.Fatalf("loading objects: %s", err)
	}
	defer objs.Close()

	// Attach the program.
	l, err := link.AttachXDP(link.XDPOptions{
		Program:   objs.XdpProgFunc,
		Interface: iface.Index,
		Flags: link.XDPGenericMode,
	})
	if err != nil {
		log.Fatalf("could not attach XDP program: %s", err)
	}
	defer l.Close()

	// Open a ringbuf reader from userspace RINGBUF map described in the
	// eBPF C program.
	rd, err := ringbuf.NewReader(objs.XdpTcppacketsMap)
	if err != nil {
		log.Fatalf("opening ringbuf reader: %s", err)
	}
	defer rd.Close()

	// Close the reader when the process receives a signal, which will exit
	// the read loop.
	/*go func() {
		<-stopper

		if err := rd.Close(); err != nil {
			log.Fatalf("closing ringbuf reader: %s", err)
		}
	}()*/

	// bpfPacketInfo is generated by bpf2go file. Present in bpfel.go
	// Generated bcoz of the "-type packet_info" flag we used when creating bpfel.go file using "go generate"
	var packet_info bpfPacketInfo
	
	log.Printf("Attached XDP program to iface %q (index %d)", iface.Name, iface.Index)
	log.Printf("Press Ctrl-C to exit and remove the program")

	// Print the contents of the BPF hash map (source IP address -> packet count).
	// ticker := time.NewTicker(1 * time.Second)
	// defer ticker.Stop()
	// for range ticker.C {
	for {
		record, err := rd.Read()
		if err != nil {
			if errors.Is(err, ringbuf.ErrClosed) {
				log.Println("Received signal, exiting..")
				return
			}
			log.Printf("reading from reader: %s", err)
			continue
		}
	// Parse the ringbuf event entry into a bpfEvent structure.
	if err := binary.Read(bytes.NewBuffer(record.RawSample), binary.LittleEndian, &packet_info); err != nil {
		log.Printf("parsing ringbuf event: %s", err)
		continue
	}
	//src_ip := net.IP(packet_info.SourceIp)
	//dest_ip := net.IP(packet_info.DestinationIp)
	//src_ip_int := packet_info.SourceIp
	//ip := make([]byte, 4)
	//source := binary.LittleEndian.PutUint32(ip, src_ip_int)
	//var src []byte = packet_info.SourceIp
	//source := net.IP(src)
	//dest_ip := packet_info.DestinationIp
	//b := make([]byte, 2)
	//temp := packet_info.TotalLength.hex())
	//tot_len := binary.LittleEndian.Uint16(temp)
	srcIP := intToIP(packet_info.SourceIp)
	destIP := intToIP(packet_info.DestinationIp)
	protocol := packet_info.Protocol
	fmt.Printf("Source IP: %s \t Destination IP: %s \t Protocol: %d \n", srcIP, destIP, protocol)
	}
}

func intToIP(ipNum uint32) net.IP {
	ip := make(net.IP, 4)
	binary.LittleEndian.PutUint32(ip, ipNum)
	return ip
}	
/*
func valToLittleEndian(num uint16) uint16{
	b := make([]byte, 2)
	binary.LittleEndian.PutUint16(b, num)
	return binary.BigEndian.Uint16(b)
}
func formatMapContents(m *ebpf.Map) (string, error) {
	var (
		sb strings.Builder
		key []byte
		val []byte
	)

	iter := m.Iterate()
	for iter.Next(&key, &val) {
		sourceIP := net.IP(key) // IPv4 source address in network byte order.
		destIP := net.IP(val)
		
		//sb.WriteString(fmt.Sprintf("\t Source IP is %s \t Destination IP is %s \t Source Port is %d\n", sourceIP, destIP, val.src_port))
		sb.WriteString(fmt.Sprintf("\t Source IP is %s \t Destination IP is %s \n", sourceIP, destIP))
	}
	return sb.String(), iter.Err()
}*/
